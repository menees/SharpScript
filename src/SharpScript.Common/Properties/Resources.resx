<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutMenuItem" xml:space="preserve">
    <value>&amp;About...</value>
  </data>
  <data name="AttachDebuggerMenuItem" xml:space="preserve">
    <value>Attach Debugger</value>
  </data>
  <data name="BreakInDebuggerMenuItem" xml:space="preserve">
    <value>Break In Debugger</value>
  </data>
  <data name="CancelExecution" xml:space="preserve">
    <value>Are you sure you want to cancel execution of the script?

It may take several seconds.</value>
  </data>
  <data name="CancelExecutionMenuItem" xml:space="preserve">
    <value>&amp;Cancel Execution...</value>
  </data>
  <data name="CompileErrors" xml:space="preserve">
    <value>Compile Errors</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FailedLoadTypeLib" xml:space="preserve">
    <value>Unable to load type library {0}.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The specified script file does not exist: {0}</value>
  </data>
  <data name="HelpMenuItem" xml:space="preserve">
    <value>&amp;Help...</value>
  </data>
  <data name="InvalidCompilerReference" xml:space="preserve">
    <value>Line {0}: A #compiler directive must specify one of: {1}.</value>
  </data>
  <data name="InvalidScriptComReference" xml:space="preserve">
    <value>Line {0}: A #com_reference directive must specify a type library or DLL file name.</value>
  </data>
  <data name="InvalidScriptDebugDirective" xml:space="preserve">
    <value>Line {0}: A #debug directive should not specify any arguments.</value>
  </data>
  <data name="InvalidScriptReference" xml:space="preserve">
    <value>Line {0}: A #reference directive must specify an assembly file name.</value>
  </data>
  <data name="LineCharacter" xml:space="preserve">
    <value>Line {0}, Character {1}: </value>
  </data>
  <data name="LinePrefix" xml:space="preserve">
    <value>Line {0}: </value>
  </data>
  <data name="TryRoslyn" xml:space="preserve">
    <value>Note: If the errors are due to language features introduced via Roslyn (e.g., C#6/VB14 or later), then add a #compiler Roslyn directive at the top of the script.</value>
  </data>
  <data name="UnsupportedExtension" xml:space="preserve">
    <value>The extension "{0}" does not map to a known script type provider.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage: {0} ScriptFileName [Options...] [ScriptArgs...]

Options:
//D	Generate debug information for the script.
//Q	Quiet mode.  The GUI version won't show a system tray icon.
//T:nn	Time out in seconds.  Maximum time a script can run.</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="YesNoPrompt" xml:space="preserve">
    <value>(Press Y or N then Enter)</value>
  </data>
</root>